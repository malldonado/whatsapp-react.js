{"ast":null,"code":"import { Dvr } from \"@material-ui/icons\";\nimport firebase from \"firebase/compat/app\";\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport firebaseConfig from './firebaseConfig';\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore(); // eslint-disable-next-line import/no-anonymous-default-export\n\nexport default {\n  fbPopup: async () => {\n    const provider = new firebase.auth.FacebookAuthProvider();\n    let result = await firebaseApp.auth().signInWithPopup(provider);\n    return result;\n  },\n  addUser: async u => {\n    await db.collection('users').doc(u.id).set({\n      name: u.name,\n      avatar: u.avatar\n    }, {\n      merge: true\n    });\n  },\n  getContactList: async userId => {\n    let list = [];\n    let results = await db.collection('users').get();\n    results.forEach(result => {\n      let data = result.data();\n\n      if (result.id !== userId) {\n        list.push({\n          id: result.id,\n          name: data.name,\n          avatar: data.avatar\n        });\n      }\n    });\n    return list;\n  },\n  addNewChat: async (user, user2) => {\n    let newChat = await db.collection('chats').add({\n      messages: [],\n      users: [user.id, user2.id]\n    });\n    db.collection('users').doc(user.id).update({\n      chats: firebase.firestore.FieldValue.arrayUnion({\n        chatId: newChat.id,\n        title: user2.name,\n        image: user2.avatar,\n        with: user2.id\n      })\n    });\n    db.collection('users').doc(user2.id).update({\n      chats: firebase.firestore.FieldValue.arrayUnion({\n        chatId: newChat.id,\n        title: user.name,\n        image: user.avatar,\n        with: user.id\n      })\n    });\n  },\n  onChatList: (userId, setChatList) => {\n    return db.collection('users').doc(userId).onSnapshot(doc => {\n      if (doc.exists) {\n        let data = doc.data();\n\n        if (data.chats) {\n          setChatList(data.chats);\n        }\n      }\n    });\n  },\n  onChatContent: (chatId, setList, setUsers) => {\n    return db.collection('chats').doc(chatId).onSnapshot(doc => {\n      if (doc.exists) {\n        let data = doc.data();\n        setList(data.messages);\n        setUsers(data.users);\n      }\n    });\n  },\n  sendMessage: async (chatData, userId, type, body, users) => {\n    let now = new Date();\n    db.collection('chats').doc(chatData.chatId).update({\n      messages: firebase.firestore.FieldValue.arrayUnion({\n        type,\n        author: userId,\n        body,\n        date: now\n      })\n    });\n\n    for (let i in users) {\n      let u = await db.collection('users').doc(users[i]).get();\n      let uData = u.data();\n\n      if (uData.chats) {\n        let chats = [...uData.chats];\n\n        for (let e in chats) {\n          if (chats[e].chatId == chatData.chatId) {\n            chats[e].lastMessage = body;\n            chats[e].lastMessageDate = now;\n          }\n        }\n\n        await db.collection('users').doc(users[i]).update({\n          chats\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/mathe/OneDrive/Desktop/Projetos/whatsapp-firebase/src/Api.js"],"names":["Dvr","firebase","firebaseConfig","firebaseApp","initializeApp","db","firestore","fbPopup","provider","auth","FacebookAuthProvider","result","signInWithPopup","addUser","u","collection","doc","id","set","name","avatar","merge","getContactList","userId","list","results","get","forEach","data","push","addNewChat","user","user2","newChat","add","messages","users","update","chats","FieldValue","arrayUnion","chatId","title","image","with","onChatList","setChatList","onSnapshot","exists","onChatContent","setList","setUsers","sendMessage","chatData","type","body","now","Date","author","date","i","uData","e","lastMessage","lastMessageDate"],"mappings":"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","sourcesContent":["import { Dvr } from \"@material-ui/icons\";\r\nimport firebase from \"firebase/compat/app\";\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\nimport firebaseConfig from './firebaseConfig';\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    fbPopup:async () => {\r\n        const provider = new firebase.auth.FacebookAuthProvider();\r\n        let result = await firebaseApp.auth().signInWithPopup(provider);\r\n        return result;\r\n    },\r\n    addUser:async (u) => {\r\n        await db.collection('users').doc(u.id).set({\r\n            name: u.name,\r\n            avatar: u.avatar\r\n        }, {merge:true});\r\n    },\r\n    getContactList:async (userId) => {\r\n        let list = [];\r\n\r\n            let results = await db.collection('users').get();\r\n            results.forEach(result => {\r\n                let data = result.data();\r\n\r\n                if(result.id !== userId) {\r\n                    list.push({\r\n                        id: result.id,\r\n                        name: data.name,\r\n                        avatar: data.avatar,\r\n                    })\r\n                }\r\n            })\r\n\r\n        return list;\r\n    },\r\n    addNewChat:async (user, user2) => {\r\n        let newChat = await db.collection('chats').add({\r\n            messages: [],\r\n            users:[user.id, user2.id]\r\n        });\r\n\r\n        db.collection('users').doc(user.id).update({\r\n            chats: firebase.firestore.FieldValue.arrayUnion({\r\n                chatId: newChat.id,\r\n                title: user2.name,\r\n                image: user2.avatar,\r\n                with: user2.id\r\n            })\r\n        })\r\n\r\n        db.collection('users').doc(user2.id).update({\r\n            chats: firebase.firestore.FieldValue.arrayUnion({\r\n                chatId: newChat.id,\r\n                title: user.name,\r\n                image: user.avatar,\r\n                with: user.id\r\n            })\r\n        })\r\n    },\r\n    onChatList:(userId, setChatList) => {\r\n        return db.collection('users').doc(userId).onSnapshot((doc) => {\r\n            if(doc.exists) {\r\n                let data = doc.data();\r\n                if(data.chats) {\r\n                    setChatList(data.chats);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    onChatContent:(chatId, setList, setUsers) => {\r\n        return db.collection('chats').doc(chatId).onSnapshot((doc) => {\r\n            if(doc.exists) {\r\n                let data = doc.data();\r\n                setList(data.messages);\r\n                setUsers(data.users);\r\n            }\r\n        })\r\n    },\r\n    sendMessage:async(chatData, userId, type, body, users) => {\r\n\r\n        let now = new Date();\r\n\r\n        db.collection('chats').doc(chatData.chatId).update({\r\n            messages: firebase.firestore.FieldValue.arrayUnion({\r\n                type,\r\n                author: userId,\r\n                body,\r\n                date: now\r\n            })\r\n        });\r\n\r\n\r\n        for(let i in users) {\r\n            let u = await db.collection('users').doc(users[i]).get();\r\n            let uData = u.data();\r\n            if(uData.chats) {\r\n                let chats = [...uData.chats];\r\n                for(let e in chats) {\r\n                    if(chats[e].chatId == chatData.chatId) {\r\n                        chats[e].lastMessage = body;\r\n                        chats[e].lastMessageDate = now;\r\n                    }\r\n                }\r\n    \r\n                await db.collection('users').doc(users[i]).update({\r\n                    chats\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}